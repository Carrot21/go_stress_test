// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msgCmd.proto

package msgcmdproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrCode int32

const (
	ErrCode_EXCEPT_ERR                 ErrCode = 0
	ErrCode_NON_ERR                    ErrCode = 32768
	ErrCode_ERR_SYS_REGIST             ErrCode = 32769
	ErrCode_ERR_LOGIN_AUTH             ErrCode = 33025
	ErrCode_ERR_LOGIN_FORBIDDEN        ErrCode = 33026
	ErrCode_ERR_LOGOUT                 ErrCode = 33027
	ErrCode_ERR_DEVICESYNC_PARAMETER   ErrCode = 33028
	ErrCode_ERR_DEVICESYNC_FORBIDDEN   ErrCode = 33029
	ErrCode_ERR_DEVICESYNC_EXCEPTION   ErrCode = 33030
	ErrCode_ERR_TRANSMISSION_FORBIDDEN ErrCode = 33031
	ErrCode_ERR_TRANSMISSION_SESSION   ErrCode = 33032
	ErrCode_ERR_CM_EXCEPTION           ErrCode = 33033
	ErrCode_ERR_CM_AUTH_KICKEDOUT      ErrCode = 33040
	// //////////CHAT SVR/////////////////
	// 		ERR_CHAT_COMM_SUCCESS		= 0x8200;							//消息发送成功， 好友添加成功等,使用通用的0x8000 NON_ERR
	ErrCode_ERR_CHAT_FORBIDDEN         ErrCode = 33281
	ErrCode_ERR_CHAT_UNHEALTHY         ErrCode = 33282
	ErrCode_ERR_CHAT_PARAMETER         ErrCode = 33283
	ErrCode_ERR_CHAT_CANCEL_OUTTIME    ErrCode = 33284
	ErrCode_ERR_CHAT_FRIEND_REFUSE     ErrCode = 33297
	ErrCode_ERR_CHAT_FRIEND_BLOCK      ErrCode = 33298
	ErrCode_ERR_CHAT_FRIEND_DEL        ErrCode = 33299
	ErrCode_ERR_CHAT_FRIEND_ADDED      ErrCode = 33300
	ErrCode_ERR_CHAT_FRIEND_ADDING     ErrCode = 33301
	ErrCode_ERR_CHAT_FRIEND_HIDENADDED ErrCode = 33302
	ErrCode_ERR_CHAT_DEENCRY_FAILED    ErrCode = 33315
	ErrCode_INFO_GROUP_PENDING         ErrCode = 33536
	ErrCode_ERR_GROUP_PARAMETER        ErrCode = 33537
	ErrCode_ERR_GROUP_OVERCREATION     ErrCode = 33538
	ErrCode_ERR_GROUP_OVERJOIN         ErrCode = 33539
	ErrCode_ERR_GROUP_NETWORKEXCEPTION ErrCode = 33540
	ErrCode_ERR_GROUP_FORBIDDEN        ErrCode = 33541
	ErrCode_ERR_GROUP_INTEREXCEPTION   ErrCode = 33542
	ErrCode_ERR_GROUP_MEMBEREXIST      ErrCode = 33543
	ErrCode_ERR_GROUP_MEMBERNONEXIST   ErrCode = 33544
	ErrCode_ERR_GROUP_INTERPERMISSION  ErrCode = 33545
	ErrCode_ERR_GROUP_NONPERMISSION    ErrCode = 33552
	ErrCode_ERR_GROUP_MASTER           ErrCode = 33553
	ErrCode_ERR_GROUP_NOTMASTER        ErrCode = 33554
	ErrCode_ERR_GROUP_INVITEEXCEPTION  ErrCode = 33555
	ErrCode_ERR_GROUP_INVITESUCCESS    ErrCode = 33556
	ErrCode_ERR_GROUP_DISMISSED        ErrCode = 33557
	ErrCode_ERR_GROUP_MEMBEREXIST_HIDE ErrCode = 33558
	ErrCode_ERR_GROUP_JOIN_REJECT      ErrCode = 33568
	ErrCode_ERR_GROUP_NOTIFY_REJECT    ErrCode = 33569
	ErrCode_ERR_GROUP_MASTER_QUIT      ErrCode = 33570
	// 通话被接受使用NON_ERROR
	ErrCode_ERR_CALL_REFUSE       ErrCode = 33792
	ErrCode_ERR_CALL_BUSY         ErrCode = 33793
	ErrCode_ERR_CALL_PEER_OFFLINE ErrCode = 33794
)

var ErrCode_name = map[int32]string{
	0:     "EXCEPT_ERR",
	32768: "NON_ERR",
	32769: "ERR_SYS_REGIST",
	33025: "ERR_LOGIN_AUTH",
	33026: "ERR_LOGIN_FORBIDDEN",
	33027: "ERR_LOGOUT",
	33028: "ERR_DEVICESYNC_PARAMETER",
	33029: "ERR_DEVICESYNC_FORBIDDEN",
	33030: "ERR_DEVICESYNC_EXCEPTION",
	33031: "ERR_TRANSMISSION_FORBIDDEN",
	33032: "ERR_TRANSMISSION_SESSION",
	33033: "ERR_CM_EXCEPTION",
	33040: "ERR_CM_AUTH_KICKEDOUT",
	33281: "ERR_CHAT_FORBIDDEN",
	33282: "ERR_CHAT_UNHEALTHY",
	33283: "ERR_CHAT_PARAMETER",
	33284: "ERR_CHAT_CANCEL_OUTTIME",
	33297: "ERR_CHAT_FRIEND_REFUSE",
	33298: "ERR_CHAT_FRIEND_BLOCK",
	33299: "ERR_CHAT_FRIEND_DEL",
	33300: "ERR_CHAT_FRIEND_ADDED",
	33301: "ERR_CHAT_FRIEND_ADDING",
	33302: "ERR_CHAT_FRIEND_HIDENADDED",
	33315: "ERR_CHAT_DEENCRY_FAILED",
	33536: "INFO_GROUP_PENDING",
	33537: "ERR_GROUP_PARAMETER",
	33538: "ERR_GROUP_OVERCREATION",
	33539: "ERR_GROUP_OVERJOIN",
	33540: "ERR_GROUP_NETWORKEXCEPTION",
	33541: "ERR_GROUP_FORBIDDEN",
	33542: "ERR_GROUP_INTEREXCEPTION",
	33543: "ERR_GROUP_MEMBEREXIST",
	33544: "ERR_GROUP_MEMBERNONEXIST",
	33545: "ERR_GROUP_INTERPERMISSION",
	33552: "ERR_GROUP_NONPERMISSION",
	33553: "ERR_GROUP_MASTER",
	33554: "ERR_GROUP_NOTMASTER",
	33555: "ERR_GROUP_INVITEEXCEPTION",
	33556: "ERR_GROUP_INVITESUCCESS",
	33557: "ERR_GROUP_DISMISSED",
	33558: "ERR_GROUP_MEMBEREXIST_HIDE",
	33568: "ERR_GROUP_JOIN_REJECT",
	33569: "ERR_GROUP_NOTIFY_REJECT",
	33570: "ERR_GROUP_MASTER_QUIT",
	33792: "ERR_CALL_REFUSE",
	33793: "ERR_CALL_BUSY",
	33794: "ERR_CALL_PEER_OFFLINE",
}

var ErrCode_value = map[string]int32{
	"EXCEPT_ERR":                 0,
	"NON_ERR":                    32768,
	"ERR_SYS_REGIST":             32769,
	"ERR_LOGIN_AUTH":             33025,
	"ERR_LOGIN_FORBIDDEN":        33026,
	"ERR_LOGOUT":                 33027,
	"ERR_DEVICESYNC_PARAMETER":   33028,
	"ERR_DEVICESYNC_FORBIDDEN":   33029,
	"ERR_DEVICESYNC_EXCEPTION":   33030,
	"ERR_TRANSMISSION_FORBIDDEN": 33031,
	"ERR_TRANSMISSION_SESSION":   33032,
	"ERR_CM_EXCEPTION":           33033,
	"ERR_CM_AUTH_KICKEDOUT":      33040,
	"ERR_CHAT_FORBIDDEN":         33281,
	"ERR_CHAT_UNHEALTHY":         33282,
	"ERR_CHAT_PARAMETER":         33283,
	"ERR_CHAT_CANCEL_OUTTIME":    33284,
	"ERR_CHAT_FRIEND_REFUSE":     33297,
	"ERR_CHAT_FRIEND_BLOCK":      33298,
	"ERR_CHAT_FRIEND_DEL":        33299,
	"ERR_CHAT_FRIEND_ADDED":      33300,
	"ERR_CHAT_FRIEND_ADDING":     33301,
	"ERR_CHAT_FRIEND_HIDENADDED": 33302,
	"ERR_CHAT_DEENCRY_FAILED":    33315,
	"INFO_GROUP_PENDING":         33536,
	"ERR_GROUP_PARAMETER":        33537,
	"ERR_GROUP_OVERCREATION":     33538,
	"ERR_GROUP_OVERJOIN":         33539,
	"ERR_GROUP_NETWORKEXCEPTION": 33540,
	"ERR_GROUP_FORBIDDEN":        33541,
	"ERR_GROUP_INTEREXCEPTION":   33542,
	"ERR_GROUP_MEMBEREXIST":      33543,
	"ERR_GROUP_MEMBERNONEXIST":   33544,
	"ERR_GROUP_INTERPERMISSION":  33545,
	"ERR_GROUP_NONPERMISSION":    33552,
	"ERR_GROUP_MASTER":           33553,
	"ERR_GROUP_NOTMASTER":        33554,
	"ERR_GROUP_INVITEEXCEPTION":  33555,
	"ERR_GROUP_INVITESUCCESS":    33556,
	"ERR_GROUP_DISMISSED":        33557,
	"ERR_GROUP_MEMBEREXIST_HIDE": 33558,
	"ERR_GROUP_JOIN_REJECT":      33568,
	"ERR_GROUP_NOTIFY_REJECT":    33569,
	"ERR_GROUP_MASTER_QUIT":      33570,
	"ERR_CALL_REFUSE":            33792,
	"ERR_CALL_BUSY":              33793,
	"ERR_CALL_PEER_OFFLINE":      33794,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{0}
}

// //////////////////////////////////////////////////////////////////////
// CM_LOGIN ： 0xa001
// //////////////////////////////////////////////////////////////////////
type CMLogin struct {
	SUserId              string   `protobuf:"bytes,1,opt,name=sUserId,proto3" json:"sUserId,omitempty"`
	SUserToken           string   `protobuf:"bytes,2,opt,name=sUserToken,proto3" json:"sUserToken,omitempty"`
	NDeviceType          uint32   `protobuf:"varint,6,opt,name=nDeviceType,proto3" json:"nDeviceType,omitempty"`
	SDeviceVersion       string   `protobuf:"bytes,7,opt,name=sDeviceVersion,proto3" json:"sDeviceVersion,omitempty"`
	SDeviceToken         string   `protobuf:"bytes,8,opt,name=sDeviceToken,proto3" json:"sDeviceToken,omitempty"`
	SDeviceVoipToken     string   `protobuf:"bytes,9,opt,name=sDeviceVoipToken,proto3" json:"sDeviceVoipToken,omitempty"`
	SAppVersion          string   `protobuf:"bytes,10,opt,name=sAppVersion,proto3" json:"sAppVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMLogin) Reset()         { *m = CMLogin{} }
func (m *CMLogin) String() string { return proto.CompactTextString(m) }
func (*CMLogin) ProtoMessage()    {}
func (*CMLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{0}
}

func (m *CMLogin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMLogin.Unmarshal(m, b)
}
func (m *CMLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMLogin.Marshal(b, m, deterministic)
}
func (m *CMLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMLogin.Merge(m, src)
}
func (m *CMLogin) XXX_Size() int {
	return xxx_messageInfo_CMLogin.Size(m)
}
func (m *CMLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_CMLogin.DiscardUnknown(m)
}

var xxx_messageInfo_CMLogin proto.InternalMessageInfo

func (m *CMLogin) GetSUserId() string {
	if m != nil {
		return m.SUserId
	}
	return ""
}

func (m *CMLogin) GetSUserToken() string {
	if m != nil {
		return m.SUserToken
	}
	return ""
}

func (m *CMLogin) GetNDeviceType() uint32 {
	if m != nil {
		return m.NDeviceType
	}
	return 0
}

func (m *CMLogin) GetSDeviceVersion() string {
	if m != nil {
		return m.SDeviceVersion
	}
	return ""
}

func (m *CMLogin) GetSDeviceToken() string {
	if m != nil {
		return m.SDeviceToken
	}
	return ""
}

func (m *CMLogin) GetSDeviceVoipToken() string {
	if m != nil {
		return m.SDeviceVoipToken
	}
	return ""
}

func (m *CMLogin) GetSAppVersion() string {
	if m != nil {
		return m.SAppVersion
	}
	return ""
}

type CMLoginAck struct {
	SUserId              string   `protobuf:"bytes,1,opt,name=sUserId,proto3" json:"sUserId,omitempty"`
	NErr                 ErrCode  `protobuf:"varint,2,opt,name=nErr,proto3,enum=msgcmdproto.ErrCode" json:"nErr,omitempty"`
	NLastLoginTime       uint64   `protobuf:"varint,3,opt,name=nLastLoginTime,proto3" json:"nLastLoginTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMLoginAck) Reset()         { *m = CMLoginAck{} }
func (m *CMLoginAck) String() string { return proto.CompactTextString(m) }
func (*CMLoginAck) ProtoMessage()    {}
func (*CMLoginAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{1}
}

func (m *CMLoginAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMLoginAck.Unmarshal(m, b)
}
func (m *CMLoginAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMLoginAck.Marshal(b, m, deterministic)
}
func (m *CMLoginAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMLoginAck.Merge(m, src)
}
func (m *CMLoginAck) XXX_Size() int {
	return xxx_messageInfo_CMLoginAck.Size(m)
}
func (m *CMLoginAck) XXX_DiscardUnknown() {
	xxx_messageInfo_CMLoginAck.DiscardUnknown(m)
}

var xxx_messageInfo_CMLoginAck proto.InternalMessageInfo

func (m *CMLoginAck) GetSUserId() string {
	if m != nil {
		return m.SUserId
	}
	return ""
}

func (m *CMLoginAck) GetNErr() ErrCode {
	if m != nil {
		return m.NErr
	}
	return ErrCode_EXCEPT_ERR
}

func (m *CMLoginAck) GetNLastLoginTime() uint64 {
	if m != nil {
		return m.NLastLoginTime
	}
	return 0
}

type CMLoginV1 struct {
	SUserId              string   `protobuf:"bytes,1,opt,name=sUserId,proto3" json:"sUserId,omitempty"`
	SLoginToken          string   `protobuf:"bytes,2,opt,name=sLoginToken,proto3" json:"sLoginToken,omitempty"`
	SDeviceToken         string   `protobuf:"bytes,3,opt,name=sDeviceToken,proto3" json:"sDeviceToken,omitempty"`
	NPushType            uint32   `protobuf:"varint,4,opt,name=nPushType,proto3" json:"nPushType,omitempty"`
	SPushToken           string   `protobuf:"bytes,5,opt,name=sPushToken,proto3" json:"sPushToken,omitempty"`
	SVersionCode         string   `protobuf:"bytes,6,opt,name=sVersionCode,proto3" json:"sVersionCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMLoginV1) Reset()         { *m = CMLoginV1{} }
func (m *CMLoginV1) String() string { return proto.CompactTextString(m) }
func (*CMLoginV1) ProtoMessage()    {}
func (*CMLoginV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{2}
}

func (m *CMLoginV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMLoginV1.Unmarshal(m, b)
}
func (m *CMLoginV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMLoginV1.Marshal(b, m, deterministic)
}
func (m *CMLoginV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMLoginV1.Merge(m, src)
}
func (m *CMLoginV1) XXX_Size() int {
	return xxx_messageInfo_CMLoginV1.Size(m)
}
func (m *CMLoginV1) XXX_DiscardUnknown() {
	xxx_messageInfo_CMLoginV1.DiscardUnknown(m)
}

var xxx_messageInfo_CMLoginV1 proto.InternalMessageInfo

func (m *CMLoginV1) GetSUserId() string {
	if m != nil {
		return m.SUserId
	}
	return ""
}

func (m *CMLoginV1) GetSLoginToken() string {
	if m != nil {
		return m.SLoginToken
	}
	return ""
}

func (m *CMLoginV1) GetSDeviceToken() string {
	if m != nil {
		return m.SDeviceToken
	}
	return ""
}

func (m *CMLoginV1) GetNPushType() uint32 {
	if m != nil {
		return m.NPushType
	}
	return 0
}

func (m *CMLoginV1) GetSPushToken() string {
	if m != nil {
		return m.SPushToken
	}
	return ""
}

func (m *CMLoginV1) GetSVersionCode() string {
	if m != nil {
		return m.SVersionCode
	}
	return ""
}

type CMLoginV1Ack struct {
	SUserId              string   `protobuf:"bytes,1,opt,name=sUserId,proto3" json:"sUserId,omitempty"`
	NErr                 ErrCode  `protobuf:"varint,2,opt,name=nErr,proto3,enum=msgcmdproto.ErrCode" json:"nErr,omitempty"`
	NLastLoginTime       uint64   `protobuf:"varint,3,opt,name=nLastLoginTime,proto3" json:"nLastLoginTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMLoginV1Ack) Reset()         { *m = CMLoginV1Ack{} }
func (m *CMLoginV1Ack) String() string { return proto.CompactTextString(m) }
func (*CMLoginV1Ack) ProtoMessage()    {}
func (*CMLoginV1Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{3}
}

func (m *CMLoginV1Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMLoginV1Ack.Unmarshal(m, b)
}
func (m *CMLoginV1Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMLoginV1Ack.Marshal(b, m, deterministic)
}
func (m *CMLoginV1Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMLoginV1Ack.Merge(m, src)
}
func (m *CMLoginV1Ack) XXX_Size() int {
	return xxx_messageInfo_CMLoginV1Ack.Size(m)
}
func (m *CMLoginV1Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_CMLoginV1Ack.DiscardUnknown(m)
}

var xxx_messageInfo_CMLoginV1Ack proto.InternalMessageInfo

func (m *CMLoginV1Ack) GetSUserId() string {
	if m != nil {
		return m.SUserId
	}
	return ""
}

func (m *CMLoginV1Ack) GetNErr() ErrCode {
	if m != nil {
		return m.NErr
	}
	return ErrCode_EXCEPT_ERR
}

func (m *CMLoginV1Ack) GetNLastLoginTime() uint64 {
	if m != nil {
		return m.NLastLoginTime
	}
	return 0
}

// MES_CHAT ： 0xb001                移动发送端发聊天消息给MES消息服务器
// //////////////////////////////////////////////////////////////////////
type MESChat struct {
	SFromId string `protobuf:"bytes,1,opt,name=sFromId,proto3" json:"sFromId,omitempty"`
	SToId   string `protobuf:"bytes,2,opt,name=sToId,proto3" json:"sToId,omitempty"`
	SMsgId  string `protobuf:"bytes,3,opt,name=sMsgId,proto3" json:"sMsgId,omitempty"`
	MsgType uint32 `protobuf:"varint,4,opt,name=msgType,proto3" json:"msgType,omitempty"`
	// 3: p2p hide ; 4: p2p hide with burning after read;
	// 5: Group chat; 6: Group with burning after read;
	// 7: Group hide; 8: Group with burning after read;
	// 9: add friend 10:customer msg,In case sToId is serviceId
	MsgTime              uint64   `protobuf:"varint,5,opt,name=msgTime,proto3" json:"msgTime,omitempty"`
	Encrypt              uint32   `protobuf:"varint,6,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	SContent             string   `protobuf:"bytes,7,opt,name=sContent,proto3" json:"sContent,omitempty"`
	Extend               string   `protobuf:"bytes,10,opt,name=extend,proto3" json:"extend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MESChat) Reset()         { *m = MESChat{} }
func (m *MESChat) String() string { return proto.CompactTextString(m) }
func (*MESChat) ProtoMessage()    {}
func (*MESChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{4}
}

func (m *MESChat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MESChat.Unmarshal(m, b)
}
func (m *MESChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MESChat.Marshal(b, m, deterministic)
}
func (m *MESChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MESChat.Merge(m, src)
}
func (m *MESChat) XXX_Size() int {
	return xxx_messageInfo_MESChat.Size(m)
}
func (m *MESChat) XXX_DiscardUnknown() {
	xxx_messageInfo_MESChat.DiscardUnknown(m)
}

var xxx_messageInfo_MESChat proto.InternalMessageInfo

func (m *MESChat) GetSFromId() string {
	if m != nil {
		return m.SFromId
	}
	return ""
}

func (m *MESChat) GetSToId() string {
	if m != nil {
		return m.SToId
	}
	return ""
}

func (m *MESChat) GetSMsgId() string {
	if m != nil {
		return m.SMsgId
	}
	return ""
}

func (m *MESChat) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *MESChat) GetMsgTime() uint64 {
	if m != nil {
		return m.MsgTime
	}
	return 0
}

func (m *MESChat) GetEncrypt() uint32 {
	if m != nil {
		return m.Encrypt
	}
	return 0
}

func (m *MESChat) GetSContent() string {
	if m != nil {
		return m.SContent
	}
	return ""
}

func (m *MESChat) GetExtend() string {
	if m != nil {
		return m.Extend
	}
	return ""
}

// //////////////////////////////////////////////////////////////////////
// MES_CHAT_ACK ： 0xb002            MES消息服务器回应移动发送端聊天消息
// //////////////////////////////////////////////////////////////////////
type MESChatAck struct {
	SUserId              string   `protobuf:"bytes,1,opt,name=sUserId,proto3" json:"sUserId,omitempty"`
	SMsgId               string   `protobuf:"bytes,2,opt,name=sMsgId,proto3" json:"sMsgId,omitempty"`
	Sendtime             uint64   `protobuf:"varint,3,opt,name=sendtime,proto3" json:"sendtime,omitempty"`
	Errcode              ErrCode  `protobuf:"varint,4,opt,name=errcode,proto3,enum=msgcmdproto.ErrCode" json:"errcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MESChatAck) Reset()         { *m = MESChatAck{} }
func (m *MESChatAck) String() string { return proto.CompactTextString(m) }
func (*MESChatAck) ProtoMessage()    {}
func (*MESChatAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{5}
}

func (m *MESChatAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MESChatAck.Unmarshal(m, b)
}
func (m *MESChatAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MESChatAck.Marshal(b, m, deterministic)
}
func (m *MESChatAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MESChatAck.Merge(m, src)
}
func (m *MESChatAck) XXX_Size() int {
	return xxx_messageInfo_MESChatAck.Size(m)
}
func (m *MESChatAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MESChatAck.DiscardUnknown(m)
}

var xxx_messageInfo_MESChatAck proto.InternalMessageInfo

func (m *MESChatAck) GetSUserId() string {
	if m != nil {
		return m.SUserId
	}
	return ""
}

func (m *MESChatAck) GetSMsgId() string {
	if m != nil {
		return m.SMsgId
	}
	return ""
}

func (m *MESChatAck) GetSendtime() uint64 {
	if m != nil {
		return m.Sendtime
	}
	return 0
}

func (m *MESChatAck) GetErrcode() ErrCode {
	if m != nil {
		return m.Errcode
	}
	return ErrCode_EXCEPT_ERR
}

type MESChatDeliveredAck struct {
	SFromId              string   `protobuf:"bytes,1,opt,name=sFromId,proto3" json:"sFromId,omitempty"`
	SToId                string   `protobuf:"bytes,2,opt,name=sToId,proto3" json:"sToId,omitempty"`
	SMsgId               string   `protobuf:"bytes,3,opt,name=sMsgId,proto3" json:"sMsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MESChatDeliveredAck) Reset()         { *m = MESChatDeliveredAck{} }
func (m *MESChatDeliveredAck) String() string { return proto.CompactTextString(m) }
func (*MESChatDeliveredAck) ProtoMessage()    {}
func (*MESChatDeliveredAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{6}
}

func (m *MESChatDeliveredAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MESChatDeliveredAck.Unmarshal(m, b)
}
func (m *MESChatDeliveredAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MESChatDeliveredAck.Marshal(b, m, deterministic)
}
func (m *MESChatDeliveredAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MESChatDeliveredAck.Merge(m, src)
}
func (m *MESChatDeliveredAck) XXX_Size() int {
	return xxx_messageInfo_MESChatDeliveredAck.Size(m)
}
func (m *MESChatDeliveredAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MESChatDeliveredAck.DiscardUnknown(m)
}

var xxx_messageInfo_MESChatDeliveredAck proto.InternalMessageInfo

func (m *MESChatDeliveredAck) GetSFromId() string {
	if m != nil {
		return m.SFromId
	}
	return ""
}

func (m *MESChatDeliveredAck) GetSToId() string {
	if m != nil {
		return m.SToId
	}
	return ""
}

func (m *MESChatDeliveredAck) GetSMsgId() string {
	if m != nil {
		return m.SMsgId
	}
	return ""
}

// //////////////////////////////////////////////////////////////////////
// MES_CHAT_DELIVERED_NOTIFICATION_ACK ： 0xb005             移动发送端接收MES消息服务器消息已送达通知确认,
// //////////////////////////////////////////////////////////////////////
type MESChatDeliveredNotificationAck struct {
	SUserId              string   `protobuf:"bytes,1,opt,name=sUserId,proto3" json:"sUserId,omitempty"`
	SMsgId               string   `protobuf:"bytes,2,opt,name=sMsgId,proto3" json:"sMsgId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MESChatDeliveredNotificationAck) Reset()         { *m = MESChatDeliveredNotificationAck{} }
func (m *MESChatDeliveredNotificationAck) String() string { return proto.CompactTextString(m) }
func (*MESChatDeliveredNotificationAck) ProtoMessage()    {}
func (*MESChatDeliveredNotificationAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{7}
}

func (m *MESChatDeliveredNotificationAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MESChatDeliveredNotificationAck.Unmarshal(m, b)
}
func (m *MESChatDeliveredNotificationAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MESChatDeliveredNotificationAck.Marshal(b, m, deterministic)
}
func (m *MESChatDeliveredNotificationAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MESChatDeliveredNotificationAck.Merge(m, src)
}
func (m *MESChatDeliveredNotificationAck) XXX_Size() int {
	return xxx_messageInfo_MESChatDeliveredNotificationAck.Size(m)
}
func (m *MESChatDeliveredNotificationAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MESChatDeliveredNotificationAck.DiscardUnknown(m)
}

var xxx_messageInfo_MESChatDeliveredNotificationAck proto.InternalMessageInfo

func (m *MESChatDeliveredNotificationAck) GetSUserId() string {
	if m != nil {
		return m.SUserId
	}
	return ""
}

func (m *MESChatDeliveredNotificationAck) GetSMsgId() string {
	if m != nil {
		return m.SMsgId
	}
	return ""
}

type SYSAssocSvrRegist struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SYSAssocSvrRegist) Reset()         { *m = SYSAssocSvrRegist{} }
func (m *SYSAssocSvrRegist) String() string { return proto.CompactTextString(m) }
func (*SYSAssocSvrRegist) ProtoMessage()    {}
func (*SYSAssocSvrRegist) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{8}
}

func (m *SYSAssocSvrRegist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SYSAssocSvrRegist.Unmarshal(m, b)
}
func (m *SYSAssocSvrRegist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SYSAssocSvrRegist.Marshal(b, m, deterministic)
}
func (m *SYSAssocSvrRegist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SYSAssocSvrRegist.Merge(m, src)
}
func (m *SYSAssocSvrRegist) XXX_Size() int {
	return xxx_messageInfo_SYSAssocSvrRegist.Size(m)
}
func (m *SYSAssocSvrRegist) XXX_DiscardUnknown() {
	xxx_messageInfo_SYSAssocSvrRegist.DiscardUnknown(m)
}

var xxx_messageInfo_SYSAssocSvrRegist proto.InternalMessageInfo

func (m *SYSAssocSvrRegist) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SYSAssocSvrRegist) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type SYSAssocSvrRegistAck struct {
	NErr                 ErrCode  `protobuf:"varint,1,opt,name=nErr,proto3,enum=msgcmdproto.ErrCode" json:"nErr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SYSAssocSvrRegistAck) Reset()         { *m = SYSAssocSvrRegistAck{} }
func (m *SYSAssocSvrRegistAck) String() string { return proto.CompactTextString(m) }
func (*SYSAssocSvrRegistAck) ProtoMessage()    {}
func (*SYSAssocSvrRegistAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab3e4944514bf35c, []int{9}
}

func (m *SYSAssocSvrRegistAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SYSAssocSvrRegistAck.Unmarshal(m, b)
}
func (m *SYSAssocSvrRegistAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SYSAssocSvrRegistAck.Marshal(b, m, deterministic)
}
func (m *SYSAssocSvrRegistAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SYSAssocSvrRegistAck.Merge(m, src)
}
func (m *SYSAssocSvrRegistAck) XXX_Size() int {
	return xxx_messageInfo_SYSAssocSvrRegistAck.Size(m)
}
func (m *SYSAssocSvrRegistAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SYSAssocSvrRegistAck.DiscardUnknown(m)
}

var xxx_messageInfo_SYSAssocSvrRegistAck proto.InternalMessageInfo

func (m *SYSAssocSvrRegistAck) GetNErr() ErrCode {
	if m != nil {
		return m.NErr
	}
	return ErrCode_EXCEPT_ERR
}

func init() {
	proto.RegisterEnum("msgcmdproto.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterType((*CMLogin)(nil), "msgcmdproto.CMLogin")
	proto.RegisterType((*CMLoginAck)(nil), "msgcmdproto.CMLoginAck")
	proto.RegisterType((*CMLoginV1)(nil), "msgcmdproto.CMLoginV1")
	proto.RegisterType((*CMLoginV1Ack)(nil), "msgcmdproto.CMLoginV1Ack")
	proto.RegisterType((*MESChat)(nil), "msgcmdproto.MESChat")
	proto.RegisterType((*MESChatAck)(nil), "msgcmdproto.MESChatAck")
	proto.RegisterType((*MESChatDeliveredAck)(nil), "msgcmdproto.MESChatDeliveredAck")
	proto.RegisterType((*MESChatDeliveredNotificationAck)(nil), "msgcmdproto.MESChatDeliveredNotificationAck")
	proto.RegisterType((*SYSAssocSvrRegist)(nil), "msgcmdproto.SYSAssocSvrRegist")
	proto.RegisterType((*SYSAssocSvrRegistAck)(nil), "msgcmdproto.SYSAssocSvrRegistAck")
}

func init() { proto.RegisterFile("msgCmd.proto", fileDescriptor_ab3e4944514bf35c) }

var fileDescriptor_ab3e4944514bf35c = []byte{
	// 1103 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x4d, 0x73, 0xdb, 0x54,
	0x14, 0xc5, 0x6a, 0x12, 0x37, 0xb7, 0x49, 0x78, 0xbc, 0xa4, 0xc1, 0x2d, 0xa5, 0xcd, 0x78, 0xc1,
	0x64, 0xba, 0xc8, 0x0c, 0xb0, 0x60, 0x8b, 0x22, 0x3d, 0x27, 0xaf, 0xb1, 0x9f, 0xcc, 0x93, 0x1c,
	0xf0, 0x82, 0xd1, 0x04, 0x5b, 0xb8, 0x9a, 0x62, 0xc9, 0x23, 0x89, 0x4c, 0xcb, 0x2a, 0x71, 0x8c,
	0x9a, 0xb2, 0xea, 0xf7, 0x9a, 0x8f, 0x3f, 0xc0, 0x1f, 0x61, 0xc5, 0x0f, 0x82, 0xd1, 0xd3, 0xd3,
	0x47, 0xe4, 0x4c, 0x98, 0x61, 0x18, 0x56, 0xf1, 0x3d, 0xe7, 0xbe, 0x7b, 0xef, 0x39, 0xf7, 0x2a,
	0xb0, 0x32, 0x0e, 0x47, 0xda, 0x78, 0xb8, 0x33, 0x09, 0xfc, 0xc8, 0xc7, 0x37, 0xc6, 0xe1, 0x68,
	0x30, 0x1e, 0x8a, 0xa0, 0xf9, 0x57, 0x0d, 0xea, 0x5a, 0xa7, 0xed, 0x8f, 0x5c, 0x0f, 0x37, 0xa0,
	0x1e, 0xf6, 0x42, 0x27, 0xa0, 0xc3, 0x46, 0x6d, 0xab, 0xb6, 0xbd, 0xcc, 0xb3, 0x10, 0xdf, 0x05,
	0x10, 0x3f, 0x2d, 0xff, 0x91, 0xe3, 0x35, 0x14, 0x41, 0x96, 0x10, 0xbc, 0x05, 0x37, 0x3c, 0xdd,
	0x39, 0x76, 0x07, 0x8e, 0xf5, 0x64, 0xe2, 0x34, 0x96, 0xb6, 0x6a, 0xdb, 0xab, 0xbc, 0x0c, 0xe1,
	0x8f, 0x60, 0x2d, 0x4c, 0xc3, 0x43, 0x27, 0x08, 0x5d, 0xdf, 0x6b, 0xd4, 0x45, 0x95, 0x0a, 0x8a,
	0x9b, 0xb0, 0x22, 0x91, 0xb4, 0xd7, 0x75, 0x91, 0x75, 0x01, 0xc3, 0xf7, 0x01, 0x65, 0xaf, 0x7c,
	0x77, 0x92, 0xe6, 0x2d, 0x8b, 0xbc, 0x39, 0x3c, 0x99, 0x2c, 0x54, 0x27, 0x93, 0xac, 0x29, 0x88,
	0xb4, 0x32, 0xd4, 0x7c, 0x0c, 0x20, 0x0d, 0x50, 0x07, 0x8f, 0xae, 0xf0, 0x60, 0x1b, 0x16, 0x3c,
	0x12, 0x04, 0x42, 0xfd, 0xda, 0x27, 0x1b, 0x3b, 0x25, 0x17, 0x77, 0x48, 0x10, 0x68, 0xfe, 0xd0,
	0xe1, 0x22, 0x23, 0xd1, 0xea, 0xb5, 0x8f, 0xc2, 0x48, 0x14, 0xb5, 0xdc, 0xb1, 0xd3, 0xb8, 0xb6,
	0x55, 0xdb, 0x5e, 0xe0, 0x15, 0xb4, 0xf9, 0x47, 0x0d, 0x96, 0x65, 0xeb, 0xc3, 0x8f, 0xaf, 0xe8,
	0x9c, 0x68, 0x48, 0x5f, 0x95, 0xec, 0x2f, 0x43, 0x73, 0xae, 0x5d, 0xbb, 0xc4, 0xb5, 0x3b, 0xb0,
	0xec, 0x75, 0xbf, 0x0f, 0x1f, 0x8a, 0x0d, 0x2d, 0x88, 0x0d, 0x15, 0x80, 0xd8, 0xb0, 0x08, 0xc4,
	0xfb, 0x45, 0xb9, 0xe1, 0x1c, 0x11, 0x1d, 0xa4, 0x63, 0x89, 0x52, 0xb1, 0xe2, 0xa4, 0x43, 0x09,
	0x6b, 0xfe, 0x00, 0x2b, 0xb9, 0x9c, 0xff, 0xdb, 0xcb, 0x3f, 0x6b, 0x50, 0xef, 0x10, 0x53, 0x7b,
	0x78, 0x14, 0x89, 0xbe, 0xad, 0xc0, 0x1f, 0x97, 0xfa, 0xa6, 0x21, 0xde, 0x80, 0xc5, 0xd0, 0xf2,
	0xe9, 0x50, 0x7a, 0x98, 0x06, 0x78, 0x13, 0x96, 0xc2, 0x4e, 0x38, 0xa2, 0x43, 0xe9, 0x9b, 0x8c,
	0x92, 0x3a, 0xe3, 0x70, 0x54, 0xf2, 0x2b, 0x0b, 0x33, 0x26, 0x19, 0x67, 0x51, 0x8c, 0x93, 0x85,
	0x09, 0xe3, 0x78, 0x83, 0xe0, 0xc9, 0x24, 0x92, 0x5f, 0x41, 0x16, 0xe2, 0xdb, 0x70, 0x3d, 0xd4,
	0x7c, 0x2f, 0x72, 0xbc, 0x48, 0xde, 0x7e, 0x1e, 0x27, 0x13, 0x38, 0x8f, 0x23, 0xc7, 0x1b, 0xca,
	0x03, 0x95, 0x51, 0xf3, 0xa7, 0x1a, 0x80, 0x54, 0x75, 0xb5, 0xa1, 0x85, 0x04, 0xe5, 0x82, 0x84,
	0xa4, 0xa9, 0xe3, 0x0d, 0xa3, 0xc2, 0xb8, 0x3c, 0xc6, 0x3b, 0x50, 0x77, 0x82, 0x60, 0x90, 0x6c,
	0x73, 0xe1, 0x8a, 0x3d, 0x64, 0x49, 0xcd, 0xaf, 0x61, 0x5d, 0xce, 0xa2, 0x3b, 0xdf, 0xb9, 0xc7,
	0x4e, 0xe0, 0x0c, 0xb3, 0xa1, 0xfe, 0x03, 0xb7, 0x9b, 0x26, 0xdc, 0xab, 0x96, 0x67, 0x7e, 0xe4,
	0x7e, 0xeb, 0x0e, 0x8e, 0x22, 0xd7, 0xf7, 0xfe, 0x95, 0xfe, 0xe6, 0x67, 0xf0, 0x9e, 0xd9, 0x37,
	0xd5, 0x30, 0xf4, 0x07, 0xe6, 0x71, 0xc0, 0x9d, 0x91, 0x1b, 0x46, 0x78, 0x0d, 0x14, 0x77, 0x22,
	0x2b, 0x28, 0xee, 0x04, 0x63, 0x58, 0x98, 0xf8, 0x41, 0x24, 0x9e, 0xae, 0x72, 0xf1, 0xbb, 0xf9,
	0x39, 0x6c, 0xcc, 0x3d, 0x4c, 0x46, 0xc8, 0x2e, 0xb7, 0xf6, 0x4f, 0x97, 0x7b, 0xff, 0x77, 0x80,
	0xba, 0x44, 0xf0, 0x1a, 0x00, 0xf9, 0x4a, 0x23, 0x5d, 0xcb, 0x26, 0x9c, 0xa3, 0x77, 0xf0, 0x2a,
	0xd4, 0x99, 0xc1, 0x44, 0x70, 0x72, 0xa2, 0xe0, 0x0d, 0x58, 0x23, 0x9c, 0xdb, 0x66, 0xdf, 0xb4,
	0x39, 0xd9, 0xa3, 0xa6, 0x85, 0x4e, 0x0b, 0xb4, 0x6d, 0xec, 0x51, 0x66, 0xab, 0x3d, 0x6b, 0x1f,
	0x9d, 0x4e, 0x15, 0x7c, 0x0b, 0xd6, 0x0b, 0xb4, 0x65, 0xf0, 0x5d, 0xaa, 0xeb, 0x84, 0xa1, 0xe9,
	0x54, 0xc1, 0x08, 0x40, 0x52, 0x46, 0xcf, 0x42, 0x67, 0x53, 0x05, 0xdf, 0x85, 0x46, 0x82, 0xe8,
	0xe4, 0x90, 0x6a, 0xc4, 0xec, 0x33, 0xcd, 0xee, 0xaa, 0x5c, 0xed, 0x10, 0x8b, 0x70, 0x34, 0xbb,
	0x94, 0x2f, 0x2a, 0xfe, 0x78, 0x29, 0x9f, 0xca, 0xa0, 0x06, 0x43, 0xf1, 0x54, 0xc1, 0x5b, 0x70,
	0x3b, 0xe1, 0x2d, 0xae, 0x32, 0xb3, 0x43, 0x4d, 0x93, 0x1a, 0xe5, 0x99, 0x9e, 0x16, 0x15, 0x2e,
	0x64, 0x98, 0x44, 0xfc, 0x45, 0xe7, 0x53, 0x05, 0x6f, 0x02, 0x4a, 0x78, 0xad, 0x53, 0xaa, 0xfc,
	0x6c, 0xaa, 0xe0, 0x0f, 0xe0, 0xa6, 0xc4, 0x13, 0xe5, 0xf6, 0x01, 0xd5, 0x0e, 0x88, 0x9e, 0xc8,
	0x7a, 0x3e, 0x55, 0x70, 0x03, 0xb0, 0x20, 0xf7, 0x55, 0xab, 0xd4, 0xee, 0x74, 0x76, 0x91, 0xe9,
	0xb1, 0x7d, 0xa2, 0xb6, 0xad, 0xfd, 0x3e, 0x9a, 0x56, 0x98, 0xc2, 0x84, 0xb3, 0x99, 0x82, 0x3f,
	0x84, 0xf7, 0x73, 0x46, 0x53, 0x99, 0x46, 0xda, 0xb6, 0xd1, 0xb3, 0x2c, 0xda, 0x21, 0x68, 0x36,
	0x53, 0xf0, 0x1d, 0xd8, 0x2c, 0x9a, 0x71, 0x4a, 0x98, 0x6e, 0x73, 0xd2, 0xea, 0x99, 0x04, 0xbd,
	0x98, 0x15, 0x73, 0x96, 0xd8, 0xdd, 0xb6, 0xa1, 0x1d, 0xa0, 0x97, 0xb3, 0x7c, 0x57, 0x65, 0x52,
	0x27, 0x6d, 0xf4, 0xea, 0xf2, 0x77, 0xaa, 0xae, 0x13, 0x1d, 0xbd, 0xbe, 0xbc, 0xa5, 0xaa, 0xeb,
	0x94, 0xed, 0xa1, 0x37, 0xb3, 0xdc, 0xf4, 0x32, 0xbb, 0x4f, 0x75, 0xc2, 0xd2, 0xf7, 0x6f, 0x2b,
	0x8a, 0x74, 0x42, 0x98, 0xc6, 0xfb, 0x76, 0x4b, 0xa5, 0x6d, 0xa2, 0xa3, 0xdf, 0x52, 0x2b, 0x28,
	0x6b, 0x19, 0xf6, 0x1e, 0x37, 0x7a, 0x5d, 0xbb, 0x4b, 0x98, 0x28, 0x7d, 0x12, 0xe7, 0x03, 0x4b,
	0x22, 0x77, 0xe9, 0x34, 0xce, 0x67, 0x4a, 0x29, 0xe3, 0x90, 0x70, 0x8d, 0x13, 0x55, 0xac, 0x6b,
	0x1a, 0xe7, 0xee, 0x16, 0xec, 0x03, 0x83, 0x32, 0x74, 0x16, 0xe7, 0xd3, 0xa6, 0x0c, 0x23, 0xd6,
	0x97, 0x06, 0x3f, 0x28, 0x56, 0x3d, 0xab, 0x36, 0x2d, 0xdd, 0x5f, 0x9c, 0x5f, 0x4f, 0x4a, 0x51,
	0x66, 0x11, 0x5e, 0xba, 0xbf, 0x38, 0x77, 0x31, 0xe5, 0x3b, 0xa4, 0xb3, 0x9b, 0x24, 0x24, 0xdf,
	0xcf, 0xd3, 0xea, 0xe3, 0x94, 0x64, 0x06, 0x4b, 0xf9, 0xf3, 0x58, 0xc1, 0xf7, 0xe0, 0x56, 0xa5,
	0x78, 0x97, 0x70, 0x79, 0xa3, 0xe8, 0x59, 0x9c, 0xdb, 0x28, 0x47, 0x37, 0x58, 0x89, 0x7e, 0x1e,
	0xe7, 0xa7, 0x2b, 0xeb, 0xab, 0x66, 0xe2, 0xd4, 0x8b, 0xaa, 0x1e, 0x66, 0x58, 0x92, 0x7a, 0x39,
	0xdf, 0xf2, 0x90, 0x5a, 0xa4, 0x10, 0xf4, 0xaa, 0xda, 0x32, 0x4d, 0x30, 0x7b, 0x9a, 0x46, 0x4c,
	0x13, 0xbd, 0xae, 0x96, 0xd6, 0xa9, 0xf8, 0xa2, 0x88, 0x8e, 0xde, 0x54, 0x7d, 0x2e, 0x59, 0x21,
	0x6e, 0x03, 0xbd, 0xad, 0x9a, 0x95, 0xec, 0xc7, 0xe6, 0xe4, 0x01, 0xd1, 0x2c, 0xf4, 0xf3, 0xbc,
	0x56, 0x8b, 0xb6, 0xfa, 0x19, 0xfd, 0xcb, 0x9c, 0xd1, 0x42, 0x90, 0xfd, 0x45, 0x8f, 0x5a, 0xe8,
	0xd7, 0x58, 0xc1, 0x37, 0xe1, 0x5d, 0x71, 0x6e, 0x6a, 0xbb, 0x9d, 0x7d, 0x1a, 0x27, 0xe7, 0x0a,
	0x5e, 0x87, 0xd5, 0x1c, 0xde, 0xed, 0x99, 0x7d, 0x74, 0x7a, 0x5e, 0xdc, 0x7d, 0x02, 0x76, 0x09,
	0xe1, 0xb6, 0xd1, 0x6a, 0xb5, 0x29, 0x23, 0x68, 0x7a, 0xae, 0x7c, 0xb3, 0x24, 0xfe, 0x8f, 0x7e,
	0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x27, 0x15, 0x92, 0xb0, 0x0a, 0x00, 0x00,
}
